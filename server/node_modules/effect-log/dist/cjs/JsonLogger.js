"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = exports.layer = void 0;
var Array = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/Array"));
var FiberId = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/FiberId"));
var HashMap = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/HashMap"));
var List = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/List"));
var Logger = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/Logger"));
var _serializeUnkown = /*#__PURE__*/require("./internal/serializeUnkown.js");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * JSON logger.
 *
 * @since 1.0.0
 */

/** @internal */
const defaultOptions = {
  showFiberId: true,
  showTime: true,
  showSpans: true,
  messageField: "message",
  logLevelField: "level",
  logLevelFormat: "capitalized"
};
const capitalize = string => string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
/** @internal */
const formatLogLevel = format => {
  if (format === "lowercase") {
    return logLevel => logLevel.label.toLowerCase();
  } else if (format === "uppercase") {
    return logLevel => logLevel.label.toUpperCase();
  }
  return logLevel => capitalize(logLevel.label);
};
/**
 * @category constructors
 * @since 1.0.0
 */
const make = options => {
  const _options = {
    ...defaultOptions,
    ...options
  };
  const _formatLogLevel = formatLogLevel(_options.logLevelFormat);
  return Logger.make(({
    annotations,
    cause,
    date,
    fiberId,
    logLevel,
    message,
    spans
  }) => {
    const tags = HashMap.reduce(annotations, {}, (acc, v, k) => ({
      ...acc,
      [k]: v
    }));
    if (_options.showTime) {
      tags["date"] = date;
    }
    tags[_options.logLevelField] = _formatLogLevel(logLevel);
    tags[_options.messageField] = Array.ensure(message).map(_serializeUnkown.serializeUnknown).join(" ");
    if (_options.showFiberId) {
      tags["fiberId"] = FiberId.threadName(fiberId);
    }
    if (_options.showSpans && List.isCons(spans)) {
      tags["spans"] = List.toArray(spans).map(span => span.label);
    }
    if (cause._tag !== "Empty") {
      tags["cause"] = cause;
    }
    console.log(JSON.stringify(tags));
  });
};
/**
 * @category layers
 * @since 1.0.0
 */
exports.make = make;
const layer = options => Logger.replace(Logger.defaultLogger, make(options ?? {}));
exports.layer = layer;
//# sourceMappingURL=JsonLogger.js.map