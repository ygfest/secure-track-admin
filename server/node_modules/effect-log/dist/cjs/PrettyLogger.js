"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.make = exports.layer = void 0;
var Array = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/Array"));
var Cause = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/Cause"));
var FiberId = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/FiberId"));
var _Function = /*#__PURE__*/require("effect/Function");
var HashMap = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/HashMap"));
var List = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/List"));
var Logger = /*#__PURE__*/_interopRequireWildcard(/*#__PURE__*/require("effect/Logger"));
var _serializeUnkown = /*#__PURE__*/require("./internal/serializeUnkown.js");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * Pretty logger.
 *
 * @since 1.0.0
 */

/** @internal */
const SEVERITY_TO_COLOR = {
  All: c => c.white,
  None: c => c.white,
  Info: c => c.green,
  Debug: c => c.blue,
  Error: c => c.red,
  Fatal: c => c.boldRed,
  Trace: c => c.dimWhite,
  Warning: c => c.yellow
};
const RESET = "\x1b[0m";
const BOLD = "\x1b[1m";
const DIM = "\x1b[2m";
const ITALIC = "\x1b[3m";
const RED = "\x1b[31m";
const GREEN = "\x1b[32m";
const YELLOW = "\x1b[33m";
const BLUE = "\x1b[34m";
const WHITE = "\x1b[37m";
/** @internal */
const enabledColorService = {
  bold: text => `${BOLD}${text}${RESET}`,
  dim: text => `${DIM}${text}${RESET}`,
  italic: text => `${ITALIC}${text}${RESET}`,
  red: text => `${RED}${text}${RESET}`,
  green: text => `${GREEN}${text}${RESET}`,
  yellow: text => `${YELLOW}${text}${RESET}`,
  blue: text => `${BLUE}${text}${RESET}`,
  white: text => `${WHITE}${text}${RESET}`,
  dimItalic: text => `${DIM}${ITALIC}${text}${RESET}`,
  dimWhite: text => `${DIM}${WHITE}${text}${RESET}`,
  boldRed: text => `${BOLD}${RED}${text}${RESET}`
};
/** @internal */
const disabledColorService = {
  bold: _Function.identity,
  dim: _Function.identity,
  italic: _Function.identity,
  red: _Function.identity,
  green: _Function.identity,
  yellow: _Function.identity,
  blue: _Function.identity,
  white: _Function.identity,
  dimItalic: _Function.identity,
  dimWhite: _Function.identity,
  boldRed: _Function.identity
};
/** @internal */
const defaultOptions = {
  showFiberId: true,
  showTime: true,
  showSpans: true,
  enableColors: true
};
/** @internal */
const createTimeString = (colorService, date) => {
  const hoursText = date.getHours().toString().padStart(2, "0");
  const minutesText = date.getMinutes().toString().padStart(2, "0");
  const secondsText = date.getSeconds().toString().padStart(2, "0");
  const millisText = date.getMilliseconds().toString().padStart(3, "0");
  return colorService.yellow(`${hoursText}:${minutesText}:${secondsText}.${millisText}`);
};
/** @internal */
const createCauseMessage = cause => {
  if (cause._tag === "Empty") {
    return "";
  }
  return Cause.pretty(cause);
};
/** @internal */
const createLogLevelString = (colorService, logLevel) => {
  const logLevelColor = SEVERITY_TO_COLOR[logLevel._tag](colorService);
  return logLevelColor(logLevel.label.padEnd(5, " "));
};
/** @internal */
const messageText = (colorService, message) => {
  if (message === undefined) {
    return colorService.dim("undefined");
  } else if (message === null) {
    return colorService.dim("null");
  } else if (message === "") {
    return colorService.dim("<empty message>");
  }
  return (0, _serializeUnkown.serializeUnknown)(message);
};
/** @internal */
const createText = (colorService, message, cause) => (0, _Function.pipe)([createCauseMessage(cause), messageText(colorService, message.join(" "))], Array.filter(i => i !== ""), Array.join(" "));
/** @internal */
const createSpanText = (colorService, spans) => {
  if (List.isNil(spans)) {
    return "";
  }
  const text = List.reduce(List.unsafeTail(spans), List.unsafeHead(spans).label, (acc, span) => `${span.label} -> ${acc}`);
  return ` ${colorService.dimItalic(text)}`;
};
/**
 * @category constructors
 * @since 1.0.0
 */
const make = options => Logger.make(({
  annotations,
  cause,
  date,
  fiberId,
  logLevel,
  message,
  spans
}) => {
  const _options = {
    ...defaultOptions,
    ...options
  };
  const colorService = _options.enableColors ? enabledColorService : disabledColorService;
  const logLevelStr = createLogLevelString(colorService, logLevel);
  const timeText = _options.showTime ? `${createTimeString(colorService, date)} ` : "";
  const fiberText = _options.showFiberId ? colorService.dim(`(Fiber ${FiberId.threadName(fiberId)}) `) : "";
  const text = createText(colorService, Array.ensure(message), cause);
  const spansText = _options.showSpans ? createSpanText(colorService, spans) : "";
  console.log(`${timeText}${fiberText}${logLevelStr}${spansText} ${text}`);
  if (!HashMap.isEmpty(annotations)) {
    const text = HashMap.reduce(annotations, [], (acc, v, k) => [...acc, colorService.white(`"${k}"`) + `: ${(0, _serializeUnkown.serializeUnknown)(v)}`]);
    console.log(`ᐉ ${colorService.dim("{")} ${text.join(", ")} ${colorService.dim("}")}`);
  }
});
/**
 * @category layers
 * @since 1.0.0
 */
exports.make = make;
const layer = options => Logger.replace(Logger.defaultLogger, make(options));
exports.layer = layer;
//# sourceMappingURL=PrettyLogger.js.map