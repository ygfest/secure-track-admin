/**
 * Pretty logger.
 *
 * @since 1.0.0
 */
import * as Array from "effect/Array";
import * as Cause from "effect/Cause";
import * as FiberId from "effect/FiberId";
import { identity, pipe } from "effect/Function";
import * as HashMap from "effect/HashMap";
import * as List from "effect/List";
import * as Logger from "effect/Logger";
import { serializeUnknown } from "./internal/serializeUnkown.js";
/** @internal */
const SEVERITY_TO_COLOR = {
  All: c => c.white,
  None: c => c.white,
  Info: c => c.green,
  Debug: c => c.blue,
  Error: c => c.red,
  Fatal: c => c.boldRed,
  Trace: c => c.dimWhite,
  Warning: c => c.yellow
};
const RESET = "\x1b[0m";
const BOLD = "\x1b[1m";
const DIM = "\x1b[2m";
const ITALIC = "\x1b[3m";
const RED = "\x1b[31m";
const GREEN = "\x1b[32m";
const YELLOW = "\x1b[33m";
const BLUE = "\x1b[34m";
const WHITE = "\x1b[37m";
/** @internal */
const enabledColorService = {
  bold: text => `${BOLD}${text}${RESET}`,
  dim: text => `${DIM}${text}${RESET}`,
  italic: text => `${ITALIC}${text}${RESET}`,
  red: text => `${RED}${text}${RESET}`,
  green: text => `${GREEN}${text}${RESET}`,
  yellow: text => `${YELLOW}${text}${RESET}`,
  blue: text => `${BLUE}${text}${RESET}`,
  white: text => `${WHITE}${text}${RESET}`,
  dimItalic: text => `${DIM}${ITALIC}${text}${RESET}`,
  dimWhite: text => `${DIM}${WHITE}${text}${RESET}`,
  boldRed: text => `${BOLD}${RED}${text}${RESET}`
};
/** @internal */
const disabledColorService = {
  bold: identity,
  dim: identity,
  italic: identity,
  red: identity,
  green: identity,
  yellow: identity,
  blue: identity,
  white: identity,
  dimItalic: identity,
  dimWhite: identity,
  boldRed: identity
};
/** @internal */
const defaultOptions = {
  showFiberId: true,
  showTime: true,
  showSpans: true,
  enableColors: true
};
/** @internal */
const createTimeString = (colorService, date) => {
  const hoursText = date.getHours().toString().padStart(2, "0");
  const minutesText = date.getMinutes().toString().padStart(2, "0");
  const secondsText = date.getSeconds().toString().padStart(2, "0");
  const millisText = date.getMilliseconds().toString().padStart(3, "0");
  return colorService.yellow(`${hoursText}:${minutesText}:${secondsText}.${millisText}`);
};
/** @internal */
const createCauseMessage = cause => {
  if (cause._tag === "Empty") {
    return "";
  }
  return Cause.pretty(cause);
};
/** @internal */
const createLogLevelString = (colorService, logLevel) => {
  const logLevelColor = SEVERITY_TO_COLOR[logLevel._tag](colorService);
  return logLevelColor(logLevel.label.padEnd(5, " "));
};
/** @internal */
const messageText = (colorService, message) => {
  if (message === undefined) {
    return colorService.dim("undefined");
  } else if (message === null) {
    return colorService.dim("null");
  } else if (message === "") {
    return colorService.dim("<empty message>");
  }
  return serializeUnknown(message);
};
/** @internal */
const createText = (colorService, message, cause) => pipe([createCauseMessage(cause), messageText(colorService, message.join(" "))], Array.filter(i => i !== ""), Array.join(" "));
/** @internal */
const createSpanText = (colorService, spans) => {
  if (List.isNil(spans)) {
    return "";
  }
  const text = List.reduce(List.unsafeTail(spans), List.unsafeHead(spans).label, (acc, span) => `${span.label} -> ${acc}`);
  return ` ${colorService.dimItalic(text)}`;
};
/**
 * @category constructors
 * @since 1.0.0
 */
export const make = options => Logger.make(({
  annotations,
  cause,
  date,
  fiberId,
  logLevel,
  message,
  spans
}) => {
  const _options = {
    ...defaultOptions,
    ...options
  };
  const colorService = _options.enableColors ? enabledColorService : disabledColorService;
  const logLevelStr = createLogLevelString(colorService, logLevel);
  const timeText = _options.showTime ? `${createTimeString(colorService, date)} ` : "";
  const fiberText = _options.showFiberId ? colorService.dim(`(Fiber ${FiberId.threadName(fiberId)}) `) : "";
  const text = createText(colorService, Array.ensure(message), cause);
  const spansText = _options.showSpans ? createSpanText(colorService, spans) : "";
  console.log(`${timeText}${fiberText}${logLevelStr}${spansText} ${text}`);
  if (!HashMap.isEmpty(annotations)) {
    const text = HashMap.reduce(annotations, [], (acc, v, k) => [...acc, colorService.white(`"${k}"`) + `: ${serializeUnknown(v)}`]);
    console.log(`ᐉ ${colorService.dim("{")} ${text.join(", ")} ${colorService.dim("}")}`);
  }
});
/**
 * @category layers
 * @since 1.0.0
 */
export const layer = options => Logger.replace(Logger.defaultLogger, make(options));
//# sourceMappingURL=PrettyLogger.js.map